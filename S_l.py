# -*- coding: utf-8 -*-
"""S_l.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13FpsZl1E7Akq8KtnkwcJMtdere5P3_ba
"""

import numpy as np
import matplotlib.pyplot as plt

def solve_LIF_model(dt, tmax, I0, V0, p, initial_spikes):
    """
    This function solves the differential equation
    that describes the LIF model for an injected current impulse I

    Args:
        dt (float): time step duration (ms)
        tmax (float): final time (ms)
        I0 (float): injected current amplitude (pA)
        V0 (float): voltage initial condition (mV)
        p (dict): parameters of the LIF model
        spikes (numpy array): binary spike train

    Returns:
        V, spikes: calculated membrane potential and binary spike train
    """

    # initialization
    nt = int(tmax / dt) + 1  # number of time steps
    V = np.zeros(nt)

    # initial condition
    V[0] = V0

    tau = p['tau']  # (ms)
    count = 0

    # Main loop for a numerical integration of the LIF model
    for k in range(nt - 1):
        if count <= 0:
            # keep in mind that I*R is in units of mV
            V[k + 1] = V[k] + dt / tau * (p['E_L'] - V[k] + p['R'] * I0)
            if V[k + 1] >= p['V_t']:
                V[k + 1] = p['V_r']
                spikes[k + 1] += 1
                count = int(p['t_r_e'] / dt)
        else:
            V[k + 1] = p['V_r']
            count -= 1

    return V, spikes

# LIF model parameters
p = {
    'tau': 30.,    # membrane capacitance (ms)
    'R': 1,        # membrane resistance (GOhm)
    'V_t': 20.,    # membrane potential threshold (mV)
    'E_L': 13.5,   # reversal potential of the leakage current (mV)
    'V_r': 13.5,   # membrane reset voltage (mV)
    't_r_e': 3.,   # excitatory membrane reset time (ms)
    't_r_i': 2.    # inhibitory membrane reset time (ms)
}

# injected current (pA)
I0 = 13.5
V0 = p['E_L']
dt = 1
tmax = 400

# Initialize spikes array
I_hat_in = spikes[:, -1]


# Solve LIF model
V, spikes_l = solve_LIF_model(dt, tmax, I0, V0, p, I_hat_in)

# Plotting
t = np.linspace(0.0, tmax, nt)
plt.plot(t, spikes_l)
plt.xlabel('Time (ms)')
plt.ylabel('S_l')
plt.title('S_l(t)')
plt.show()